[{"type":"issue","categories":["Clarity"],"check_name":"global-require","description":"Unexpected require().","content":{"body":"# Enforce require() on the top-level module scope (global-require)\n\nIn Node.js, module dependencies are included using the `require()` function, such as:\n\n```js\nvar fs = require(\"fs\");\n```\n\nWhile `require()` may be called anywhere in code, some style guides prescribe that it should be called only in the top level of a module to make it easier to identify dependencies. For instance, it's arguably harder to identify dependencies when they are deeply nested inside of functions and other statements:\n\n```js\nfunction foo() {\n\n    if (condition) {\n        var fs = require(\"fs\");\n    }\n}\n```\n\nSince `require()` does a synchronous load, it can cause performance problems when used in other locations.\n\nFurther, ES6 modules mandate that `import` and `export` statements can only occur in the top level of the module's body.\n\n## Rule Details\n\nThis rule requires all calls to `require()` to be at the top level of the module, similar to ES6 `import` and `export` statements, which also can occur only at the top level.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint global-require: \"error\"*/\n/*eslint-env es6*/\n\n// calling require() inside of a function is not allowed\nfunction readFile(filename, callback) {\n    var fs = require('fs');\n    fs.readFile(filename, callback)\n}\n\n// conditional requires like this are also not allowed\nif (DEBUG) { require('debug'); }\n\n// a require() in a switch statement is also flagged\nswitch(x) { case '1': require('1'); break; }\n\n// you may not require() inside an arrow function body\nvar getModule = (name) => require(name);\n\n// you may not require() inside of a function body as well\nfunction getModule(name) { return require(name); }\n\n// you may not require() inside of a try/catch block\ntry {\n    require(unsafeModule);\n} catch(e) {\n    console.log(e);\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint global-require: \"error\"*/\n\n// all these variations of require() are ok\nrequire('x');\nvar y = require('y');\nvar z;\nz = require('z').initialize();\n\n// requiring a module and using it in a function is ok\nvar fs = require('fs');\nfunction readFile(filename, callback) {\n    fs.readFile(filename, callback)\n}\n\n// you can use a ternary to determine which module to require\nvar logger = DEBUG ? require('dev-logger') : require('logger');\n\n// if you want you can require() at the end of your module\nfunction doSomethingA() {}\nfunction doSomethingB() {}\nvar x = require(\"x\"),\n    z = require(\"z\");\n```\n\n## When Not To Use It\n\nIf you have a module that must be initialized with information that comes from the file-system or if a module is only used in very rare situations and will cause significant overhead to load it may make sense to disable the rule. If you need to `require()` an optional dependency inside of a `try`/`catch`, you can disable this rule for just that dependency using the `// eslint-disable-line global-require` comment.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"resources/js/bootstrap.js","positions":{"begin":{"line":10,"column":21},"end":{"line":10,"column":21}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"d0d8b6774668c45f239623ba96a9f8a6","severity":"minor"},{"type":"issue","categories":["Clarity"],"check_name":"global-require","description":"Unexpected require().","content":{"body":"# Enforce require() on the top-level module scope (global-require)\n\nIn Node.js, module dependencies are included using the `require()` function, such as:\n\n```js\nvar fs = require(\"fs\");\n```\n\nWhile `require()` may be called anywhere in code, some style guides prescribe that it should be called only in the top level of a module to make it easier to identify dependencies. For instance, it's arguably harder to identify dependencies when they are deeply nested inside of functions and other statements:\n\n```js\nfunction foo() {\n\n    if (condition) {\n        var fs = require(\"fs\");\n    }\n}\n```\n\nSince `require()` does a synchronous load, it can cause performance problems when used in other locations.\n\nFurther, ES6 modules mandate that `import` and `export` statements can only occur in the top level of the module's body.\n\n## Rule Details\n\nThis rule requires all calls to `require()` to be at the top level of the module, similar to ES6 `import` and `export` statements, which also can occur only at the top level.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint global-require: \"error\"*/\n/*eslint-env es6*/\n\n// calling require() inside of a function is not allowed\nfunction readFile(filename, callback) {\n    var fs = require('fs');\n    fs.readFile(filename, callback)\n}\n\n// conditional requires like this are also not allowed\nif (DEBUG) { require('debug'); }\n\n// a require() in a switch statement is also flagged\nswitch(x) { case '1': require('1'); break; }\n\n// you may not require() inside an arrow function body\nvar getModule = (name) => require(name);\n\n// you may not require() inside of a function body as well\nfunction getModule(name) { return require(name); }\n\n// you may not require() inside of a try/catch block\ntry {\n    require(unsafeModule);\n} catch(e) {\n    console.log(e);\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint global-require: \"error\"*/\n\n// all these variations of require() are ok\nrequire('x');\nvar y = require('y');\nvar z;\nz = require('z').initialize();\n\n// requiring a module and using it in a function is ok\nvar fs = require('fs');\nfunction readFile(filename, callback) {\n    fs.readFile(filename, callback)\n}\n\n// you can use a ternary to determine which module to require\nvar logger = DEBUG ? require('dev-logger') : require('logger');\n\n// if you want you can require() at the end of your module\nfunction doSomethingA() {}\nfunction doSomethingB() {}\nvar x = require(\"x\"),\n    z = require(\"z\");\n```\n\n## When Not To Use It\n\nIf you have a module that must be initialized with information that comes from the file-system or if a module is only used in very rare situations and will cause significant overhead to load it may make sense to disable the rule. If you need to `require()` an optional dependency inside of a `try`/`catch`, you can disable this rule for just that dependency using the `// eslint-disable-line global-require` comment.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"resources/js/bootstrap.js","positions":{"begin":{"line":11,"column":32},"end":{"line":11,"column":32}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"d0d8b6774668c45f239623ba96a9f8a6","severity":"minor"},{"type":"issue","categories":["Clarity"],"check_name":"global-require","description":"Unexpected require().","content":{"body":"# Enforce require() on the top-level module scope (global-require)\n\nIn Node.js, module dependencies are included using the `require()` function, such as:\n\n```js\nvar fs = require(\"fs\");\n```\n\nWhile `require()` may be called anywhere in code, some style guides prescribe that it should be called only in the top level of a module to make it easier to identify dependencies. For instance, it's arguably harder to identify dependencies when they are deeply nested inside of functions and other statements:\n\n```js\nfunction foo() {\n\n    if (condition) {\n        var fs = require(\"fs\");\n    }\n}\n```\n\nSince `require()` does a synchronous load, it can cause performance problems when used in other locations.\n\nFurther, ES6 modules mandate that `import` and `export` statements can only occur in the top level of the module's body.\n\n## Rule Details\n\nThis rule requires all calls to `require()` to be at the top level of the module, similar to ES6 `import` and `export` statements, which also can occur only at the top level.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint global-require: \"error\"*/\n/*eslint-env es6*/\n\n// calling require() inside of a function is not allowed\nfunction readFile(filename, callback) {\n    var fs = require('fs');\n    fs.readFile(filename, callback)\n}\n\n// conditional requires like this are also not allowed\nif (DEBUG) { require('debug'); }\n\n// a require() in a switch statement is also flagged\nswitch(x) { case '1': require('1'); break; }\n\n// you may not require() inside an arrow function body\nvar getModule = (name) => require(name);\n\n// you may not require() inside of a function body as well\nfunction getModule(name) { return require(name); }\n\n// you may not require() inside of a try/catch block\ntry {\n    require(unsafeModule);\n} catch(e) {\n    console.log(e);\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint global-require: \"error\"*/\n\n// all these variations of require() are ok\nrequire('x');\nvar y = require('y');\nvar z;\nz = require('z').initialize();\n\n// requiring a module and using it in a function is ok\nvar fs = require('fs');\nfunction readFile(filename, callback) {\n    fs.readFile(filename, callback)\n}\n\n// you can use a ternary to determine which module to require\nvar logger = DEBUG ? require('dev-logger') : require('logger');\n\n// if you want you can require() at the end of your module\nfunction doSomethingA() {}\nfunction doSomethingB() {}\nvar x = require(\"x\"),\n    z = require(\"z\");\n```\n\n## When Not To Use It\n\nIf you have a module that must be initialized with information that comes from the file-system or if a module is only used in very rare situations and will cause significant overhead to load it may make sense to disable the rule. If you need to `require()` an optional dependency inside of a `try`/`catch`, you can disable this rule for just that dependency using the `// eslint-disable-line global-require` comment.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"resources/js/bootstrap.js","positions":{"begin":{"line":13,"column":5},"end":{"line":13,"column":5}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"d0d8b6774668c45f239623ba96a9f8a6","severity":"minor"}]
